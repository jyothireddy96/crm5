# Generated by Django 3.0.4 on 2020-07-07 07:35

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name_title', models.CharField(max_length=200)),
                ('name_first', models.CharField(max_length=100)),
                ('name_middle', models.CharField(max_length=100)),
                ('name_last', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('password', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_Title', models.CharField(max_length=200)),
                ('contact_First', models.CharField(max_length=200)),
                ('contact_Middle', models.CharField(max_length=200)),
                ('contact_Last', models.CharField(max_length=200)),
                ('lead_Refferal_Source', models.CharField(max_length=200)),
                ('date_Of_Intial_Contact', models.DateTimeField()),
                ('title', models.CharField(max_length=200)),
                ('company', models.CharField(max_length=200)),
                ('industry', models.CharField(max_length=200)),
                ('address', models.CharField(max_length=200)),
                ('address_street_1', models.CharField(max_length=200)),
                ('address_street_2', models.CharField(max_length=200)),
                ('address_City', models.CharField(max_length=200)),
                ('address_State', models.CharField(max_length=200)),
                ('adress_Zip', models.CharField(max_length=200)),
                ('address_Country', models.CharField(max_length=200)),
                ('phone', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField()),
                ('linkedIn_Profile', models.CharField(max_length=200)),
                ('background_Inf', models.TextField()),
                ('rating', models.CharField(max_length=30)),
                ('project_Type', models.CharField(max_length=200)),
                ('project_Description', models.TextField()),
                ('proposal_Due_Date', models.DateField()),
                ('budget', models.FloatField()),
                ('deliverables', models.CharField(max_length=200)),
                ('sales_Rep', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Contact_Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Lead', 'Lead'), ('Opportunity', 'Opportunity'), ('Customer/won', 'Customer/won'), ('Archive', 'Archive')], max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='roles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roles_status', models.CharField(choices=[('Sales_rep', 'Sales_rep'), ('Sales_manager', 'Sales_manager'), ('Admin', 'Admin')], max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='task_status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='todo_desc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(choices=[('Follow Up Email', 'Follow Up Email'), ('Phone Call', 'Phone Call'), ('Lunch Meeting', 'Lunch Meeting'), ('Tech Demo', 'Tech Demo'), ('Meetup', 'Meetup'), ('Conference', 'Conference'), ('Others', 'Others')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='todo_type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('task', 'task'), ('meeting', 'meeting')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='user_status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Pending_approval', 'Pending_approval')], max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('notes', models.CharField(max_length=200, null=True)),
                ('is_New_Todo', models.CharField(max_length=200, null=True)),
                ('Todo_Due_Date', models.DateField()),
                ('Task_Update', models.CharField(max_length=200, null=True)),
                ('Sales_Rep', models.CharField(max_length=200, null=True)),
                ('Contact', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='testapp.Contact')),
                ('Task_Status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='testapp.task_status')),
                ('Todo_Desc_ID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='testapp.todo_desc')),
                ('Todo_Type_ID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='testapp.todo_type')),
            ],
        ),
        migrations.AddField(
            model_name='contact',
            name='status',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='testapp.Contact_Status'),
        ),
        migrations.AddField(
            model_name='user',
            name='User_Roles',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='testapp.roles'),
        ),
        migrations.AddField(
            model_name='user',
            name='User_Status',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='testapp.user_status'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
